#!/bin/bash
# OBINexus Polycall Build System Repair Script
# Addresses Makefile conflicts, missing dependencies, and introduces meson

set -euo pipefail

# Configuration
PROJECT_ROOT="$(pwd)"
BUILD_DIR="${PROJECT_ROOT}/build"
SCRIPTS_DIR="${PROJECT_ROOT}/scripts"
CMAKE_DIR="${PROJECT_ROOT}/cmake"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${YELLOW}=== OBINexus Polycall Build System Repair ===${NC}"

# Step 1: Fix Missing lib/Makefile.lib
fix_makefile_lib() {
    echo -e "${YELLOW}Creating missing lib/Makefile.lib...${NC}"
    
    mkdir -p lib
    cat > lib/Makefile.lib << 'EOF'
# OBINexus Polycall Library Build Configuration
# Generated by build system repair script

# Library version and metadata
LIB_VERSION ?= 0.7.0
LIB_NAME = libpolycall
LIB_SONAME = $(LIB_NAME).so.$(LIB_VERSION)

# Compiler and linker settings
CC ?= gcc
CFLAGS += -fPIC -Wall -Wextra -std=c11
LDFLAGS += -shared -Wl,-soname,$(LIB_SONAME)

# Core library components
LIB_CORE_OBJS = \
    core/polycall/polycall_core.o \
    core/config/polycall_config.o \
    core/protocol/polycall_protocol.o \
    core/network/polycall_network.o

# CLI library components
LIB_CLI_OBJS = \
    cli/polycall_cli.o

# All objects for static and shared libraries
LIB_ALL_OBJS = $(LIB_CORE_OBJS) $(LIB_CLI_OBJS)

# Build targets
.PHONY: lib lib-static lib-shared lib-install lib-clean

lib: lib-static lib-shared

lib-static: $(LIB_NAME).a

lib-shared: $(LIB_SONAME)

$(LIB_NAME).a: $(LIB_ALL_OBJS)
	@echo "[AR] Creating static library $@"
	@ar rcs $@ $^

$(LIB_SONAME): $(LIB_ALL_OBJS)
	@echo "[LD] Creating shared library $@"
	@$(CC) $(LDFLAGS) -o $@ $^
	@ln -sf $(LIB_SONAME) $(LIB_NAME).so

# Object file compilation
%.o: %.c
	@echo "[CC] Compiling $<"
	@$(CC) $(CFLAGS) -c $< -o $@

lib-install: lib
	@echo "[INSTALL] Installing libraries"
	@install -D -m 755 $(LIB_SONAME) $(DESTDIR)/usr/lib/$(LIB_SONAME)
	@install -D -m 644 $(LIB_NAME).a $(DESTDIR)/usr/lib/$(LIB_NAME).a
	@ln -sf $(LIB_SONAME) $(DESTDIR)/usr/lib/$(LIB_NAME).so

lib-clean:
	@echo "[CLEAN] Removing library objects and targets"
	@rm -f $(LIB_ALL_OBJS) $(LIB_NAME).a $(LIB_SONAME) $(LIB_NAME).so
EOF
    
    echo -e "${GREEN}✓ lib/Makefile.lib created${NC}"
}

# Step 2: Fix CMakeLists.txt parse error
fix_cmake_parse_error() {
    echo -e "${YELLOW}Fixing CMakeLists.txt parse error...${NC}"
    
    # Create backup of current CMakeLists.txt
    if [ -f CMakeLists.txt ]; then
        cp CMakeLists.txt CMakeLists.txt.backup
    fi
    
    # Create corrected CMakeLists.txt
    cat > CMakeLists.txt << 'EOF'
# OBINexus Polycall Project Build Configuration
cmake_minimum_required(VERSION 3.16)

project(polycall
    VERSION 0.7.0
    DESCRIPTION "OBINexus Polymorphic Call System"
    LANGUAGES C CXX
)

# Build configuration
set(CMAKE_C_STANDARD 11)
set(CMAKE_C_STANDARD_REQUIRED ON)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Project options
option(BUILD_SHARED_LIBS "Build shared libraries" ON)
option(BUILD_TESTING "Build test suite" ON)
option(ENABLE_NLINK "Enable nlink integration" ON)
option(POLYCALL_SECURITY_LEVEL "Security level configuration" "standard")

# Include custom cmake modules
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")

# Find required packages
find_package(Threads REQUIRED)

# Set up include directories
include_directories(
    ${CMAKE_CURRENT_SOURCE_DIR}/include
    ${CMAKE_CURRENT_SOURCE_DIR}/src
)

# Configure build type
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE "Release" CACHE STRING "Build type" FORCE)
endif()

# Compiler flags
set(CMAKE_C_FLAGS_DEBUG "-g -O0 -DDEBUG")
set(CMAKE_C_FLAGS_RELEASE "-O3 -DNDEBUG")

# Add subdirectories
add_subdirectory(src/core)
add_subdirectory(src/cli)

# Testing
if(BUILD_TESTING)
    enable_testing()
    add_subdirectory(tests)
endif()

# Installation
install(TARGETS polycall_core polycall_cli
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
    RUNTIME DESTINATION bin
)

# Configuration summary
message(STATUS "Polycall Configuration Summary:")
message(STATUS "  Version: ${PROJECT_VERSION}")
message(STATUS "  Build type: ${CMAKE_BUILD_TYPE}")
message(STATUS "  Shared libs: ${BUILD_SHARED_LIBS}")
message(STATUS "  Testing: ${BUILD_TESTING}")
message(STATUS "  Security level: ${POLYCALL_SECURITY_LEVEL}")
EOF
    
    echo -e "${GREEN}✓ CMakeLists.txt fixed${NC}"
}

# Step 3: Create consolidated Makefile
create_consolidated_makefile() {
    echo -e "${YELLOW}Creating consolidated Makefile...${NC}"
    
    # Backup existing Makefile
    if [ -f Makefile ]; then
        cp Makefile Makefile.backup
    fi
    
    cat > Makefile << 'EOF'
# OBINexus Polycall Consolidated Build System
# Integrates Make, CMake, and Meson build systems

# Project configuration
PROJECT_NAME = polycall
VERSION = 0.7.0
BUILD_MODE ?= release
PARALLEL_JOBS ?= $(shell nproc)

# Directories
ROOT_DIR = $(shell pwd)
BUILD_DIR = $(ROOT_DIR)/build
SRC_DIR = $(ROOT_DIR)/src
INCLUDE_DIR = $(ROOT_DIR)/include

# Include library build rules
-include lib/Makefile.lib

# Build system selection
BUILD_SYSTEM ?= make
CMAKE_BUILD_DIR = $(BUILD_DIR)/cmake
MESON_BUILD_DIR = $(BUILD_DIR)/meson

# Default target
.PHONY: all build clean test docs help

all: build

# Make-based build (default)
build:
	@echo "[MAKE] Building polycall project..."
	@mkdir -p $(BUILD_DIR)
	@$(MAKE) -C src BUILD_DIR=$(BUILD_DIR) BUILD_MODE=$(BUILD_MODE)
	@$(MAKE) lib

# CMake-based build
cmake-build:
	@echo "[CMAKE] Building polycall project..."
	@mkdir -p $(CMAKE_BUILD_DIR)
	@cd $(CMAKE_BUILD_DIR) && cmake ../.. \
		-DCMAKE_BUILD_TYPE=$(shell echo $(BUILD_MODE) | sed 's/.*/\u&/') \
		-DBUILD_TESTING=ON
	@cd $(CMAKE_BUILD_DIR) && cmake --build . --parallel $(PARALLEL_JOBS)

# Meson-based build
meson-build: meson-setup
	@echo "[MESON] Building polycall project..."
	@cd $(MESON_BUILD_DIR) && meson compile

meson-setup:
	@echo "[MESON] Setting up build directory..."
	@mkdir -p $(MESON_BUILD_DIR)
	@cd $(MESON_BUILD_DIR) && meson setup .. \
		--buildtype=$(BUILD_MODE) \
		-Denable_testing=true

# Core component builds
build-core:
	@echo "[MAKE] Building core components..."
	@$(MAKE) -C src/core BUILD_MODE=$(BUILD_MODE)

build-cli:
	@echo "[MAKE] Building CLI components..."
	@$(MAKE) -C src/cli BUILD_MODE=$(BUILD_MODE)

# Testing targets
test: build
	@echo "[TEST] Running test suite..."
	@$(MAKE) -C tests run-tests

cmake-test: cmake-build
	@cd $(CMAKE_BUILD_DIR) && ctest --output-on-failure

meson-test: meson-build
	@cd $(MESON_BUILD_DIR) && meson test

# Documentation
docs:
	@echo "[DOCS] Generating documentation..."
	@doxygen Doxyfile 2>/dev/null || echo "Warning: doxygen not found, skipping docs"

# Clean targets
clean:
	@echo "[CLEAN] Cleaning build artifacts..."
	@rm -rf $(BUILD_DIR)
	@$(MAKE) lib-clean
	@find . -name "*.o" -delete
	@find . -name "*.so" -delete
	@find . -name "*.a" -delete

cmake-clean:
	@echo "[CMAKE-CLEAN] Cleaning CMake build..."
	@rm -rf $(CMAKE_BUILD_DIR)

meson-clean:
	@echo "[MESON-CLEAN] Cleaning Meson build..."
	@rm -rf $(MESON_BUILD_DIR)

clean-all: clean cmake-clean meson-clean

# Installation
install: build
	@echo "[INSTALL] Installing polycall..."
	@$(MAKE) lib-install
	@install -D -m 755 $(BUILD_DIR)/polycall $(DESTDIR)/usr/bin/polycall

# Development targets
format:
	@echo "[FORMAT] Formatting source code..."
	@find src include -name "*.c" -o -name "*.h" | xargs clang-format -i

lint:
	@echo "[LINT] Running static analysis..."
	@cppcheck --enable=all --inconclusive src/ 2>/dev/null || echo "Warning: cppcheck not found"

# Help target
help:
	@echo "OBINexus Polycall Build System"
	@echo ""
	@echo "Available targets:"
	@echo "  build         - Build project using Make (default)"
	@echo "  cmake-build   - Build project using CMake"
	@echo "  meson-build   - Build project using Meson"
	@echo "  test          - Run test suite"
	@echo "  docs          - Generate documentation"
	@echo "  clean         - Clean build artifacts"
	@echo "  install       - Install binaries and libraries"
	@echo "  format        - Format source code"
	@echo "  lint          - Run static analysis"
	@echo "  help          - Show this help message"
	@echo ""
	@echo "Build modes: debug, release (default: release)"
	@echo "Example: make build BUILD_MODE=debug"
EOF
    
    echo -e "${GREEN}✓ Consolidated Makefile created${NC}"
}

# Step 4: Create Meson build configuration
create_meson_config() {
    echo -e "${YELLOW}Creating Meson build configuration...${NC}"
    
    cat > meson.build << 'EOF'
# OBINexus Polycall Meson Build Configuration
project('polycall', 'c',
    version: '0.7.0',
    license: 'Apache-2.0',
    default_options: [
        'c_std=c11',
        'warning_level=3',
        'werror=true'
    ]
)

# Project configuration
polycall_version = meson.project_version()
polycall_name = meson.project_name()

# Dependencies
thread_dep = dependency('threads')

# Configuration options
enable_testing = get_option('enable_testing')
enable_nlink = get_option('enable_nlink')
security_level = get_option('security_level')

# Include directories
inc_dirs = include_directories('include', 'src')

# Subdirectories
subdir('src')

if enable_testing
    subdir('tests')
endif

# Summary
summary({
    'Version': polycall_version,
    'Testing': enable_testing,
    'NLink': enable_nlink,
    'Security Level': security_level,
}, bool_yn: true)
EOF

    cat > meson_options.txt << 'EOF'
# Meson build options for OBINexus Polycall

option('enable_testing', type: 'boolean', value: true,
       description: 'Enable test suite compilation')

option('enable_nlink', type: 'boolean', value: true,
       description: 'Enable nlink integration')

option('security_level', type: 'string', value: 'standard',
       description: 'Security level configuration')
EOF
    
    echo -e "${GREEN}✓ Meson configuration created${NC}"
}

# Step 5: Create component Makefiles for src directories
create_component_makefiles() {
    echo -e "${YELLOW}Creating component Makefiles...${NC}"
    
    # Core components Makefile
    mkdir -p src/core
    cat > src/core/Makefile << 'EOF'
# Core components Makefile
BUILD_MODE ?= release
BUILD_DIR ?= ../../build

CORE_COMPONENTS = polycall config protocol network auth

CFLAGS = -Wall -Wextra -std=c11 -I../../include
ifeq ($(BUILD_MODE),debug)
    CFLAGS += -g -O0 -DDEBUG
else
    CFLAGS += -O3 -DNDEBUG
endif

.PHONY: all clean $(CORE_COMPONENTS)

all: $(CORE_COMPONENTS)

$(CORE_COMPONENTS):
	@echo "[CORE] Building $@..."
	@$(MAKE) -C $@ BUILD_DIR=$(BUILD_DIR) BUILD_MODE=$(BUILD_MODE)

clean:
	@for comp in $(CORE_COMPONENTS); do \
		$(MAKE) -C $$comp clean; \
	done
EOF

    # CLI components Makefile
    mkdir -p src/cli
    cat > src/cli/Makefile << 'EOF'
# CLI components Makefile
BUILD_MODE ?= release
BUILD_DIR ?= ../../build

CLI_SOURCES = polycall_cli.c
CLI_OBJECTS = $(CLI_SOURCES:.c=.o)
CLI_TARGET = $(BUILD_DIR)/polycall

CFLAGS = -Wall -Wextra -std=c11 -I../../include
ifeq ($(BUILD_MODE),debug)
    CFLAGS += -g -O0 -DDEBUG
else
    CFLAGS += -O3 -DNDEBUG
endif

.PHONY: all clean

all: $(CLI_TARGET)

$(CLI_TARGET): $(CLI_OBJECTS) | $(BUILD_DIR)
	@echo "[CLI] Linking $@..."
	@$(CC) $(CLI_OBJECTS) -L$(BUILD_DIR) -lpolycall -o $@

%.o: %.c
	@echo "[CLI] Compiling $<..."
	@$(CC) $(CFLAGS) -c $< -o $@

$(BUILD_DIR):
	@mkdir -p $(BUILD_DIR)

clean:
	@rm -f $(CLI_OBJECTS) $(CLI_TARGET)
EOF

    echo -e "${GREEN}✓ Component Makefiles created${NC}"
}

# Step 6: Run the repair process
main() {
    echo -e "${YELLOW}Starting build system repair...${NC}"
    
    fix_makefile_lib
    fix_cmake_parse_error
    create_consolidated_makefile
    create_meson_config
    create_component_makefiles
    
    echo -e "${GREEN}=== Build System Repair Complete ===${NC}"
    echo -e "${YELLOW}Next steps:${NC}"
    echo "1. Test the build: make build"
    echo "2. Test CMake: make cmake-build"
    echo "3. Test Meson: make meson-build"
    echo "4. Run tests: make test"
    echo "5. View help: make help"
}

# Execute main function
main "$@"
