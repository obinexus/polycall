@startuml LibPolyCall FFI Architecture

package "Core System" {
  [polycall_core_context] as CoreContext
  [polycall_error] as Error
  [polycall_memory] as Memory
}

package "FFI Module" {
  [ffi_core] as FFICore
  [type_system] as TypeSystem
  [memory_bridge] as MemoryBridge
  [security] as Security
  [protocol_bridge] as ProtocolBridge
  
  package "Language Bridges" {
    [c_bridge] as CBridge
    [js_bridge] as JSBridge
    [python_bridge] as PythonBridge
    [jvm_bridge] as JVMBridge
  }
  
  [performance] as Performance
}

package "Protocol System" {
  [polycall_protocol_context] as ProtocolContext
}

' Core relationships
CoreContext --> Error : provides error handling
CoreContext --> Memory : manages memory

' Main FFI relationships
FFICore --> CoreContext : uses
FFICore --> TypeSystem : manages type conversions
FFICore --> MemoryBridge : manages shared memory
FFICore --> Security : enforces permissions
FFICore --> Performance : monitors metrics

' Protocol bridge
ProtocolBridge --> FFICore : translates between FFI and Protocol
ProtocolBridge --> ProtocolContext : communicates with

' Bridge relationships
CBridge --> FFICore : implements for C
JSBridge --> FFICore : implements for JavaScript
PythonBridge --> FFICore : implements for Python
JVMBridge --> FFICore : implements for JVM

' Functions for each component
component "FFICore" as FFICore_Functions {
  interface API as "Functions" {
    +polycall_ffi_init()
    +polycall_ffi_cleanup()
    +polycall_ffi_register_language()
    +polycall_ffi_expose_function()
    +polycall_ffi_call_function()
    +polycall_ffi_register_type()
  }
}

component "TypeSystem" as TypeSystem_Functions {
  interface API as "Functions" {
    +polycall_type_register()
    +polycall_type_convert()
    +polycall_type_serialize()
    +polycall_type_deserialize()
    +polycall_type_validate()
  }
}

component "MemoryBridge" as MemoryBridge_Functions {
  interface API as "Functions" {
    +polycall_memory_share()
    +polycall_memory_track_reference()
    +polycall_memory_acquire()
    +polycall_memory_release()
    +polycall_memory_synchronize()
  }
}

component "Security" as Security_Functions {
  interface API as "Functions" {
    +polycall_security_verify_access()
    +polycall_security_register_function()
    +polycall_security_audit_call()
    +polycall_security_enforce_isolation()
    +polycall_security_validate_parameters()
  }
}

component "CBridge" as CBridge_Functions {
  interface API as "Functions" {
    +polycall_c_register_function()
    +polycall_c_call_function()
    +polycall_c_convert_type()
    +polycall_c_handle_exception()
  }
}

component "JSBridge" as JSBridge_Functions {
  interface API as "Functions" {
    +polycall_js_register_function()
    +polycall_js_call_function()
    +polycall_js_convert_type()
    +polycall_js_handle_exception()
  }
}

component "PythonBridge" as PythonBridge_Functions {
  interface API as "Functions" {
    +polycall_python_register_function()
    +polycall_python_call_function()
    +polycall_python_convert_type()
    +polycall_python_handle_exception()
  }
}

component "JVMBridge" as JVMBridge_Functions {
  interface API as "Functions" {
    +polycall_jvm_register_function()
    +polycall_jvm_call_function()
    +polycall_jvm_convert_type()
    +polycall_jvm_handle_exception()
  }
}

component "ProtocolBridge" as ProtocolBridge_Functions {
  interface API as "Functions" {
    +polycall_protocol_to_ffi_message()
    +polycall_ffi_to_protocol_message()
    +polycall_register_protocol_handler()
    +polycall_route_ffi_call()
  }
}

component "Performance" as Performance_Functions {
  interface API as "Functions" {
    +polycall_performance_record_call()
    +polycall_performance_get_metrics()
    +polycall_performance_optimize_path()
    +polycall_performance_analyze_bottlenecks()
  }
}

FFICore_Functions -[hidden]-> FFICore
TypeSystem_Functions -[hidden]-> TypeSystem
MemoryBridge_Functions -[hidden]-> MemoryBridge
Security_Functions -[hidden]-> Security
CBridge_Functions -[hidden]-> CBridge
JSBridge_Functions -[hidden]-> JSBridge
PythonBridge_Functions -[hidden]-> PythonBridge
JVMBridge_Functions -[hidden]-> JVMBridge
ProtocolBridge_Functions -[hidden]-> ProtocolBridge
Performance_Functions -[hidden]-> Performance

@enduml