#!/bin/bash
# Waterfall Module Integration System
# OBINexus LibPolyCall - Complete Phase-Module Matrix
# Phase: Full Lifecycle Integration

set -e

PROJECT_ROOT="$(cd "$(dirname "$0")/.." && pwd)"
ADHOC_DIR="$PROJECT_ROOT/scripts/adhoc"

# Core modules per Aegis specification
CORE_MODULES=(
    "auth"
    "edge"
    "ffi"
    "micro"
    "network"
    "protocol"
    "telemetry"
    "accessibility"
    "config"
)

# Waterfall phases
WATERFALL_PHASES=(
    "01-requirements"
    "02-design"
    "03-implementation"
    "04-testing"
    "05-deployment"
    "06-maintenance"
)

echo "=== LibPolyCall Waterfall-Module Integration ==="
echo "Project Root: $PROJECT_ROOT"
echo ""

# Create module-specific waterfall structure
create_module_waterfall() {
    local module="$1"
    echo "Creating waterfall structure for module: $module"
    
    for phase in "${WATERFALL_PHASES[@]}"; do
        local module_phase_dir="$ADHOC_DIR/modules/$module/$phase"
        mkdir -p "$module_phase_dir"/{scripts,tests,docs}
        
        # Create module-phase orchestrator
        cat > "$module_phase_dir/main.sh" << EOF
#!/bin/bash
# Module: $module - Phase: ${phase#*-}
# OBINexus LibPolyCall Module-Phase Controller
# Phase: ${phase#*-}

set -e

MODULE="$module"
PHASE="${phase#*-}"
MODULE_DIR="\$(cd "\$(dirname "\$0")" && pwd)"
PROJECT_ROOT="\$(cd "\$MODULE_DIR/../../../../.." && pwd)"

# Phase-specific execution for module
execute_module_phase() {
    echo "[MODULE:\$MODULE] Executing \$PHASE phase..."
    
    case "\$PHASE" in
        requirements)
            # Generate module requirements
            echo "  - Analyzing \$MODULE requirements..."
            [ -f "\$MODULE_DIR/scripts/analyze_requirements.py" ] && \\
                python3 "\$MODULE_DIR/scripts/analyze_requirements.py" --project-root "\$PROJECT_ROOT"
            ;;
        design)
            # Design module interface
            echo "  - Designing \$MODULE interface..."
            [ -f "\$MODULE_DIR/scripts/design_interface.py" ] && \\
                python3 "\$MODULE_DIR/scripts/design_interface.py" --project-root "\$PROJECT_ROOT"
            ;;
        implementation)
            # Fix and implement module
            echo "  - Implementing \$MODULE..."
            for script in "\$MODULE_DIR/scripts"/fix_*.py; do
                [ -f "\$script" ] && python3 "\$script" --project-root "\$PROJECT_ROOT" --module "\$MODULE"
            done
            ;;
        testing)
            # Run module tests
            echo "  - Testing \$MODULE..."
            if [ -d "\$PROJECT_ROOT/tests/core/\$MODULE" ]; then
                pytest "\$PROJECT_ROOT/tests/core/\$MODULE" -v || echo "Tests pending"
            fi
            ;;
        deployment)
            # Prepare module for deployment
            echo "  - Preparing \$MODULE for deployment..."
            [ -f "\$MODULE_DIR/scripts/prepare_deployment.sh" ] && \\
                bash "\$MODULE_DIR/scripts/prepare_deployment.sh"
            ;;
        maintenance)
            # Module maintenance tasks
            echo "  - Maintaining \$MODULE..."
            [ -f "\$MODULE_DIR/scripts/check_health.py" ] && \\
                python3 "\$MODULE_DIR/scripts/check_health.py" --project-root "\$PROJECT_ROOT"
            ;;
    esac
    
    echo "  ✓ \$MODULE \$PHASE complete"
}

# Main execution
execute_module_phase
EOF
        chmod +x "$module_phase_dir/main.sh"
    done
}

# Create module-specific test generators
create_module_tests() {
    local module="$1"
    local test_dir="$ADHOC_DIR/modules/$module/04-testing/scripts"
    mkdir -p "$test_dir"
    
    # TDD test generator for module
    cat > "$test_dir/generate_tests.py" << EOF
#!/usr/bin/env python3
"""
TDD Test Generator for $module module
Phase: Testing
"""

import argparse
import os
import sys
from pathlib import Path

def generate_module_tests(project_root: Path, module: str):
    """Generate TDD tests for module"""
    test_dir = project_root / "tests" / "core" / module
    test_dir.mkdir(parents=True, exist_ok=True)
    
    # Basic test template
    test_content = f'''#!/usr/bin/env python3
"""
Unit tests for {module} module
Generated by TDD framework
"""

import pytest
import sys
from pathlib import Path

# Add project root to path
sys.path.insert(0, str(Path(__file__).parent.parent.parent.parent))

class Test{module.title()}Module:
    """Test cases for {module} module"""
    
    def test_module_initialization(self):
        """Test module can be initialized"""
        # TODO: Implement initialization test
        assert True
    
    def test_module_interface(self):
        """Test module interface compliance"""
        # TODO: Implement interface test
        assert True
    
    def test_module_functionality(self):
        """Test core functionality"""
        # TODO: Implement functionality test
        assert True

if __name__ == "__main__":
    pytest.main([__file__, "-v"])
'''
    
    test_file = test_dir / f"test_{module}.py"
    test_file.write_text(test_content)
    print(f"Generated test: {test_file}")

def main():
    parser = argparse.ArgumentParser(description="Generate module tests")
    parser.add_argument("--project-root", required=True, help="Project root path")
    parser.add_argument("--module", default="$module", help="Module name")
    
    args = parser.parse_args()
    project_root = Path(args.project_root)
    
    generate_module_tests(project_root, args.module)

if __name__ == "__main__":
    main()
EOF
    chmod +x "$test_dir/generate_tests.py"
}

# Create master module orchestrator
create_module_orchestrator() {
    cat > "$ADHOC_DIR/module-waterfall.sh" << 'EOF'
#!/bin/bash
# Master Module-Waterfall Orchestrator
# Phase: Full Module Lifecycle

set -e

ADHOC_DIR="$(cd "$(dirname "$0")" && pwd)"
PROJECT_ROOT="$(cd "$ADHOC_DIR/../.." && pwd)"

# Core modules
MODULES=(auth edge ffi micro network protocol telemetry accessibility config)
PHASES=(01-requirements 02-design 03-implementation 04-testing 05-deployment 06-maintenance)

# Execute phase for single module
execute_module_phase() {
    local module="$1"
    local phase="$2"
    local script="$ADHOC_DIR/modules/$module/$phase/main.sh"
    
    if [ -f "$script" ]; then
        echo "Executing: $module/$phase"
        bash "$script"
    else
        echo "Not implemented: $module/$phase"
    fi
}

# Execute phase for all modules
execute_phase_all_modules() {
    local phase="$1"
    echo "=== Executing $phase for all modules ==="
    
    for module in "${MODULES[@]}"; do
        execute_module_phase "$module" "$phase"
    done
}

# Execute all phases for single module
execute_module_lifecycle() {
    local module="$1"
    echo "=== Executing full lifecycle for module: $module ==="
    
    for phase in "${PHASES[@]}"; do
        execute_module_phase "$module" "$phase"
    done
}

# Main command dispatcher
case "${1:-help}" in
    module)
        # Execute specific module through all phases
        if [ -n "$2" ]; then
            execute_module_lifecycle "$2"
        else
            echo "Usage: $0 module <module-name>"
            exit 1
        fi
        ;;
    phase)
        # Execute specific phase for all modules
        if [ -n "$2" ]; then
            execute_phase_all_modules "$2"
        else
            echo "Usage: $0 phase <phase-name>"
            exit 1
        fi
        ;;
    matrix)
        # Show module-phase matrix
        echo "=== Module-Phase Matrix ==="
        printf "%-15s" "Module"
        for phase in "${PHASES[@]}"; do
            printf "%-20s" "${phase#*-}"
        done
        echo ""
        
        for module in "${MODULES[@]}"; do
            printf "%-15s" "$module"
            for phase in "${PHASES[@]}"; do
                if [ -f "$ADHOC_DIR/modules/$module/$phase/main.sh" ]; then
                    printf "%-20s" "✓"
                else
                    printf "%-20s" "○"
                fi
            done
            echo ""
        done
        ;;
    test)
        # Run TDD for specific module
        if [ -n "$2" ]; then
            echo "Running TDD for module: $2"
            execute_module_phase "$2" "04-testing"
        else
            echo "Usage: $0 test <module-name>"
            exit 1
        fi
        ;;
    help|*)
        echo "Usage: $0 {module|phase|matrix|test} [args]"
        echo ""
        echo "Commands:"
        echo "  module <name>  - Execute full lifecycle for module"
        echo "  phase <name>   - Execute phase for all modules"
        echo "  matrix         - Show module-phase implementation matrix"
        echo "  test <module>  - Run TDD tests for module"
        echo ""
        echo "Modules: ${MODULES[*]}"
        echo "Phases: ${PHASES[*]}"
        ;;
esac
EOF
    chmod +x "$ADHOC_DIR/module-waterfall.sh"
}

# Create integration test framework
create_integration_framework() {
    cat > "$ADHOC_DIR/integration-test.sh" << 'EOF'
#!/bin/bash
# Integration Test Framework
# Phase: Testing - Integration

set -e

ADHOC_DIR="$(cd "$(dirname "$0")" && pwd)"
PROJECT_ROOT="$(cd "$ADHOC_DIR/../.." && pwd)"

# Run integration tests between modules
run_integration_tests() {
    echo "=== Running Integration Tests ==="
    
    # Test module interactions
    local test_pairs=(
        "auth:network"     # Auth + Network integration
        "edge:protocol"    # Edge + Protocol integration
        "ffi:micro"        # FFI + Microservices integration
        "telemetry:config" # Telemetry + Config integration
    )
    
    for pair in "${test_pairs[@]}"; do
        IFS=':' read -r module1 module2 <<< "$pair"
        echo "Testing integration: $module1 <-> $module2"
        
        # Run integration test if exists
        local test_script="$PROJECT_ROOT/tests/integration/test_${module1}_${module2}.py"
        if [ -f "$test_script" ]; then
            python3 "$test_script" --project-root "$PROJECT_ROOT"
        else
            echo "  - Integration test pending"
        fi
    done
}

# Validate module dependencies
validate_dependencies() {
    echo "=== Validating Module Dependencies ==="
    
    # Check include dependencies
    for module_dir in "$PROJECT_ROOT/include/polycall"/*; do
        if [ -d "$module_dir" ]; then
            module=$(basename "$module_dir")
            echo "Checking dependencies for: $module"
            
            # Analyze includes
            grep -h "^#include" "$module_dir"/*.h 2>/dev/null | \
                grep -v "polycall/$module" | \
                sort | uniq | \
                while read -r include; do
                    echo "  - Depends on: $include"
                done
        fi
    done
}

# Main execution
case "${1:-all}" in
    all)
        run_integration_tests
        validate_dependencies
        ;;
    test)
        run_integration_tests
        ;;
    deps)
        validate_dependencies
        ;;
    *)
        echo "Usage: $0 {all|test|deps}"
        ;;
esac
EOF
    chmod +x "$ADHOC_DIR/integration-test.sh"
}

# Main execution
main() {
    # Create module directories and scripts
    for module in "${CORE_MODULES[@]}"; do
        create_module_waterfall "$module"
        create_module_tests "$module"
    done
    
    # Create orchestrators
    create_module_orchestrator
    create_integration_framework
    
    echo ""
    echo "=== Waterfall-Module Integration Complete ==="
    echo ""
    echo "Created structure:"
    echo "  - Module phases: $ADHOC_DIR/modules/<module>/<phase>"
    echo "  - Module orchestrator: $ADHOC_DIR/module-waterfall.sh"
    echo "  - Integration tests: $ADHOC_DIR/integration-test.sh"
    echo ""
    echo "Quick start commands:"
    echo "  1. View matrix: $ADHOC_DIR/module-waterfall.sh matrix"
    echo "  2. Test module: $ADHOC_DIR/module-waterfall.sh test auth"
    echo "  3. Run phase: $ADHOC_DIR/module-waterfall.sh phase 03-implementation"
    echo "  4. Full module: $ADHOC_DIR/module-waterfall.sh module network"
    echo ""
    echo "To execute waterfall for all modules:"
    echo "  $ADHOC_DIR/waterfall.sh run"
}

main "$@"
