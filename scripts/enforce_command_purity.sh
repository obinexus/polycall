#!/bin/bash
# OBINexus PolyCall Command Purity Enforcement Script
# Ensures proper module isolation and build structure

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Script location
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="${PROJECT_ROOT:-$(dirname "$SCRIPT_DIR")}"

echo -e "${BLUE}=== OBINexus PolyCall Command Purity Enforcer ===${NC}"
echo "Project Root: $PROJECT_ROOT"
echo

# Function to check Python availability
check_python() {
    if command -v python3 &> /dev/null; then
        PYTHON_CMD="python3"
    elif command -v python &> /dev/null; then
        PYTHON_CMD="python"
    else
        echo -e "${RED}Error: Python not found${NC}"
        exit 1
    fi
}

# Function to setup migration script
setup_migration_script() {
    local migration_script="$PROJECT_ROOT/scripts/polycall_migration_enforcer.py"
    
    if [ ! -f "$migration_script" ]; then
        echo -e "${YELLOW}Migration script not found. Creating...${NC}"
        mkdir -p "$(dirname "$migration_script")"
        # The Python script should already be created via the artifact
        # This is a fallback check
        return 1
    fi
    
    chmod +x "$migration_script"
    return 0
}

# Function to run command purity check
check_command_purity() {
    echo -e "${BLUE}Checking command module purity...${NC}"
    
    if $PYTHON_CMD "$PROJECT_ROOT/scripts/polycall_migration_enforcer.py" "$PROJECT_ROOT" --check-only; then
        echo -e "${GREEN}✓ Command purity check passed${NC}"
        return 0
    else
        echo -e "${RED}✗ Command purity violations detected${NC}"
        return 1
    fi
}

# Function to run full migration
run_migration() {
    echo -e "${BLUE}Running full migration...${NC}"
    
    if $PYTHON_CMD "$PROJECT_ROOT/scripts/polycall_migration_enforcer.py" "$PROJECT_ROOT"; then
        echo -e "${GREEN}✓ Migration completed successfully${NC}"
        return 0
    else
        echo -e "${RED}✗ Migration failed${NC}"
        return 1
    fi
}

# Function to update CMakeLists.txt for command purity
update_cmake_purity() {
    local cmake_file="$PROJECT_ROOT/CMakeLists.txt"
    local purity_marker="# COMMAND_PURITY_ENFORCEMENT"
    
    if ! grep -q "$purity_marker" "$cmake_file" 2>/dev/null; then
        echo -e "${YELLOW}Updating CMakeLists.txt for command purity...${NC}"
        
        cat >> "$cmake_file" << 'EOF'

# COMMAND_PURITY_ENFORCEMENT
# Validate command module isolation
add_custom_target(validate_purity ALL
    COMMAND ${CMAKE_COMMAND} -E echo "Validating command purity..."
    COMMAND ${Python3_EXECUTABLE} ${CMAKE_SOURCE_DIR}/scripts/polycall_migration_enforcer.py ${CMAKE_SOURCE_DIR} --check-only
    COMMENT "Checking for command cross-dependencies"
)

# Ensure purity check runs before build
add_dependencies(polycall validate_purity)
EOF
        echo -e "${GREEN}✓ Updated CMakeLists.txt${NC}"
    fi
}

# Function to create build directory structure
create_build_structure() {
    echo -e "${BLUE}Creating build directory structure...${NC}"
    
    local dirs=(
        "$PROJECT_ROOT/build"
        "$PROJECT_ROOT/build/bin"
        "$PROJECT_ROOT/build/lib"
        "$PROJECT_ROOT/build/obj"
        "$PROJECT_ROOT/build/obj/core"
        "$PROJECT_ROOT/build/obj/cli"
    )
    
    for dir in "${dirs[@]}"; do
        mkdir -p "$dir"
        echo "  Created: $dir"
    done
    
    echo -e "${GREEN}✓ Build structure created${NC}"
}

# Function to generate module registration stubs
generate_module_stubs() {
    echo -e "${BLUE}Generating module registration stubs...${NC}"
    
    local modules=("micro" "telemetry" "edge" "auth" "config" "network")
    
    for module in "${modules[@]}"; do
        local stub_file="$PROJECT_ROOT/src/cli/commands/${module}_commands.c"
        local stub_dir="$(dirname "$stub_file")"
        
        mkdir -p "$stub_dir"
        
        if [ ! -f "$stub_file" ]; then
            cat > "$stub_file" << EOF
/*
 * ${module}_commands.c
 * Command registration for ${module} module
 * Auto-generated by command purity enforcer
 */

#include "cli/command_registry_ioc.h"
#include <stdio.h>

// Example command handler
static int ${module}_status_handler(int argc, char** argv) {
    printf("${module} module status: OK\\n");
    return 0;
}

// Register ${module} commands
void polycall_register_${module}_commands(polycall_registry_t* registry) {
    polycall_registry_register(registry, 
        "${module}:status", 
        "Show ${module} module status",
        ${module}_status_handler);
    
    // TODO: Add more ${module} commands here
}
EOF
            echo "  Generated: $stub_file"
        fi
    done
    
    echo -e "${GREEN}✓ Module stubs generated${NC}"
}

# Function to create Makefile include for purity
create_makefile_include() {
    local makefile_inc="$PROJECT_ROOT/Makefile.purity.inc"
    
    cat > "$makefile_inc" << 'EOF'
# Makefile.purity.inc - Command Purity Build Rules
# Auto-generated by enforce_command_purity.sh

# Command module isolation enforcement
COMMAND_MODULES := micro telemetry edge auth config network
INFRA_MODULES := base polycall common memory error context

# Object file lists per module
define MODULE_OBJECTS
$(1)_OBJS := $$(patsubst src/core/$(1)/%.c,$(OBJ_DIR)/core/$(1)/%.o,$$(wildcard src/core/$(1)/*.c))
endef

$(foreach mod,$(COMMAND_MODULES),$(eval $(call MODULE_OBJECTS,$(mod))))
$(foreach mod,$(INFRA_MODULES),$(eval $(call MODULE_OBJECTS,$(mod))))

# CLI IoC objects
CLI_IOC_OBJS := $(OBJ_DIR)/cli/main_ioc.o \
                $(OBJ_DIR)/cli/command_registry_ioc.o \
                $(patsubst src/cli/commands/%.c,$(OBJ_DIR)/cli/commands/%.o,$(wildcard src/cli/commands/*_commands.c))

# Purity validation rule
.PHONY: validate-purity
validate-purity:
	@echo "Validating command module purity..."
	@python3 scripts/polycall_migration_enforcer.py . --check-only || \
		(echo "Command purity violation detected!" && exit 1)

# Build rules with purity check
$(POLYCALL_BIN): validate-purity $(CLI_IOC_OBJS) $(LIBPOLYCALL_STATIC)
	@echo "Linking polycall with IoC..."
	@$(CC) -o $@ $(CLI_IOC_OBJS) -L$(LIB_DIR) -lpolycall $(LDFLAGS)

# Pattern rules for compilation
$(OBJ_DIR)/%.o: src/%.c
	@mkdir -p $(dir $@)
	@echo "Compiling: $<"
	@$(CC) $(CFLAGS) -c $< -o $@

# Library rules
$(LIBPOLYCALL_STATIC): $(foreach mod,$(COMMAND_MODULES) $(INFRA_MODULES),$($(mod)_OBJS))
	@echo "Building static library..."
	@$(AR) rcs $@ $^

$(LIBPOLYCALL_SHARED): $(foreach mod,$(COMMAND_MODULES) $(INFRA_MODULES),$($(mod)_OBJS))
	@echo "Building shared library..."
	@$(CC) -shared -o $@ $^ $(LDFLAGS)

# Clean with preservation
clean-purity:
	@echo "Cleaning build artifacts (preserving purity reports)..."
	@rm -rf $(BUILD_DIR)/bin $(BUILD_DIR)/lib $(BUILD_DIR)/obj
	@echo "Clean complete."
EOF

    echo -e "${GREEN}✓ Created Makefile.purity.inc${NC}"
}

# Function to update main Makefile
update_main_makefile() {
    local makefile="$PROJECT_ROOT/Makefile"
    local include_marker="include Makefile.purity.inc"
    
    if ! grep -q "$include_marker" "$makefile" 2>/dev/null; then
        echo -e "${YELLOW}Updating main Makefile...${NC}"
        
        # Add include after the first target
        sed -i '/^all:/a\\n# Command purity enforcement\ninclude Makefile.purity.inc\n' "$makefile"
        
        echo -e "${GREEN}✓ Updated Makefile${NC}"
    fi
}

# Main execution
main() {
    local mode="${1:-full}"
    
    # Check Python
    check_python
    
    # Setup migration script
    if ! setup_migration_script; then
        echo -e "${RED}Failed to setup migration script${NC}"
        exit 1
    fi
    
    case "$mode" in
        check)
            # Only check purity
            check_command_purity
            ;;
        
        migrate)
            # Run full migration
            run_migration
            ;;
        
        setup)
            # Setup build environment
            create_build_structure
            generate_module_stubs
            create_makefile_include
            update_main_makefile
            update_cmake_purity
            ;;
        
        full|*)
            # Full enforcement
            create_build_structure
            if run_migration; then
                generate_module_stubs
                create_makefile_include
                update_main_makefile
                update_cmake_purity
                
                echo
                echo -e "${GREEN}=== Command Purity Enforcement Complete ===${NC}"
                echo "Build outputs will be in: $PROJECT_ROOT/build/"
                echo "  - Executable: build/bin/polycall"
                echo "  - Static lib: build/lib/libpolycall.a"
                echo "  - Shared lib: build/lib/libpolycall.so"
                echo
                echo "To build with purity enforcement:"
                echo "  make -f Makefile build"
                echo
                echo "To validate purity only:"
                echo "  $0 check"
            else
                echo -e "${RED}Migration failed. Fix violations and try again.${NC}"
                exit 1
            fi
            ;;
    esac
}

# Script execution
if [ "${BASH_SOURCE[0]}" == "${0}" ]; then
    main "$@"
fi