# Makefile.projects - OBINexus PolyCall Project Orchestrator
# Unified subcommand interface with complete help system
# Copyright (c) 2025 OBINexus Computing

# Project Metadata
PROJECT_NAME := PolyCall
PROJECT_VERSION := 0.1.0-dev
PROJECT_DESC := Command-Driven Polymorphic Runtime System

# Subcommand Makefiles
MAKEFILE_ROOT := Makefile
MAKEFILE_BUILD := Makefile.build
MAKEFILE_PURITY := Makefile.purity
MAKEFILE_SPEC := Makefile.spec
MAKEFILE_VENDOR := Makefile.vendor

# Colors for help output
NO_COLOR := \033[0m
BOLD := \033[1m
BLUE := \033[34m
GREEN := \033[32m
YELLOW := \033[33m
RED := \033[31m

# Default target shows help
.DEFAULT_GOAL := help

# Main help target with subcommand listing
.PHONY: help help-all help-build help-purity help-spec help-vendor

help:
	@echo "$(BOLD)$(PROJECT_NAME) Build System v$(PROJECT_VERSION)$(NO_COLOR)"
	@echo "$(PROJECT_DESC)"
	@echo ""
	@echo "$(BOLD)Usage:$(NO_COLOR)"
	@echo "  make [target] [options]"
	@echo ""
	@echo "$(BOLD)Primary Targets:$(NO_COLOR)"
	@echo "  $(GREEN)all$(NO_COLOR)              - Build everything (default: release mode)"
	@echo "  $(GREEN)build$(NO_COLOR)            - Build the project"
	@echo "  $(GREEN)test$(NO_COLOR)             - Run all tests"
	@echo "  $(GREEN)install$(NO_COLOR)          - Install the library and tools"
	@echo "  $(GREEN)clean$(NO_COLOR)            - Clean build artifacts"
	@echo ""
	@echo "$(BOLD)Subcommand Categories:$(NO_COLOR)"
	@echo "  $(BLUE)make help-build$(NO_COLOR)   - Show build subcommands"
	@echo "  $(BLUE)make help-purity$(NO_COLOR)  - Show purity/security subcommands"
	@echo "  $(BLUE)make help-spec$(NO_COLOR)    - Show QA/testing subcommands"
	@echo "  $(BLUE)make help-vendor$(NO_COLOR)  - Show vendor/browser testing subcommands"
	@echo "  $(BLUE)make help-all$(NO_COLOR)     - Show all available targets"
	@echo ""
	@echo "$(BOLD)Quick Start:$(NO_COLOR)"
	@echo "  make setup        - Initialize project structure"
	@echo "  make build test   - Build and test"
	@echo "  make demo         - Run interactive demo"
	@echo ""
	@echo "$(BOLD)Options:$(NO_COLOR)"
	@echo "  BUILD_MODE={debug|release|profile}     (default: release)"
	@echo "  EDGE_MICRO={enabled|disabled}          (default: disabled)"
	@echo "  SECURITY_LEVEL={none|standard|paranoid} (default: standard)"

help-all: help
	@echo ""
	@echo "$(BOLD)━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━$(NO_COLOR)"
	@$(MAKE) -s help-build
	@echo ""
	@$(MAKE) -s help-purity
	@echo ""
	@$(MAKE) -s help-spec
	@echo ""
	@$(MAKE) -s help-vendor
	@echo ""
	@$(MAKE) -s help-project

help-build:
	@echo "$(BOLD)Build Subcommands:$(NO_COLOR)"
	@echo "  $(GREEN)build-all$(NO_COLOR)        - Build static, shared libraries and CLI"
	@echo "  $(GREEN)static$(NO_COLOR)           - Build static library only"
	@echo "  $(GREEN)shared$(NO_COLOR)           - Build shared library only"
	@echo "  $(GREEN)cli$(NO_COLOR)              - Build command-line interface"
	@echo "  $(GREEN)edge-build$(NO_COLOR)       - Build edge micro components"
	@echo "  $(GREEN)edge-deploy$(NO_COLOR)      - Deploy edge micro (requires EDGE_MICRO=enabled)"
	@echo "  $(GREEN)build-info$(NO_COLOR)       - Show build configuration details"
	@echo "  $(GREEN)deps$(NO_COLOR)             - Generate dependency graph"
	@echo "  $(GREEN)cmake-gen$(NO_COLOR)        - Generate CMake configuration"

help-purity:
	@echo "$(BOLD)Purity & Security Subcommands:$(NO_COLOR)"
	@echo "  $(GREEN)check-mutex$(NO_COLOR)      - Verify command exclusivity"
	@echo "  $(GREEN)security-scan$(NO_COLOR)    - Run comprehensive security analysis"
	@echo "  $(GREEN)security-audit$(NO_COLOR)   - Audit code for vulnerabilities"
	@echo "  $(GREEN)edge-security$(NO_COLOR)    - Check edge micro security constraints"
	@echo "  $(GREEN)check-memory$(NO_COLOR)     - Analyze memory safety patterns"
	@echo "  $(GREEN)check-concurrency$(NO_COLOR) - Check for race conditions"
	@echo "  $(GREEN)recover-crash$(NO_COLOR)    - Recover from build system crash"

help-spec:
	@echo "$(BOLD)QA & Testing Subcommands:$(NO_COLOR)"
	@echo "  $(GREEN)qa-full$(NO_COLOR)          - Run complete QA suite"
	@echo "  $(GREEN)unit-tests$(NO_COLOR)       - Run unit tests only"
	@echo "  $(GREEN)integration-tests$(NO_COLOR) - Run integration tests"
	@echo "  $(GREEN)performance-test$(NO_COLOR) - Run performance benchmarks"
	@echo "  $(GREEN)security-test$(NO_COLOR)    - Run security-focused tests"
	@echo "  $(GREEN)coverage-report$(NO_COLOR)  - Generate code coverage report"
	@echo "  $(GREEN)lint-all$(NO_COLOR)         - Run all linters"
	@echo "  $(GREEN)format$(NO_COLOR)           - Auto-format source code"

help-vendor:
	@echo "$(BOLD)Vendor & Browser Testing:$(NO_COLOR)"
	@echo "  $(GREEN)vendor-test$(NO_COLOR)      - Test all browser compatibility"
	@echo "  $(GREEN)test-chrome$(NO_COLOR)      - Test Chrome/Chromium support"
	@echo "  $(GREEN)test-firefox$(NO_COLOR)     - Test Firefox support"
	@echo "  $(GREEN)test-safari$(NO_COLOR)      - Test Safari support"
	@echo "  $(GREEN)test-edge$(NO_COLOR)        - Test Edge support"
	@echo "  $(GREEN)wasm-build$(NO_COLOR)       - Build WebAssembly module"
	@echo "  $(GREEN)serve-demo$(NO_COLOR)       - Start demo web server"

help-project:
	@echo "$(BOLD)Project Management:$(NO_COLOR)"
	@echo "  $(GREEN)setup$(NO_COLOR)            - Initialize project structure"
	@echo "  $(GREEN)setup-fixtures$(NO_COLOR)   - Install test fixtures"
	@echo "  $(GREEN)setup-examples$(NO_COLOR)   - Set up example projects"
	@echo "  $(GREEN)compile-protos$(NO_COLOR)   - Compile Protocol Buffer definitions"
	@echo "  $(GREEN)generate-docs$(NO_COLOR)    - Generate API documentation"
	@echo "  $(GREEN)bootstrap$(NO_COLOR)        - Run bootstrap setup script"
	@echo "  $(GREEN)demo$(NO_COLOR)             - Launch interactive demo"

# Project setup orchestration
.PHONY: setup setup-fixtures setup-examples bootstrap demo

setup:
	@echo "$(BOLD)Setting up $(PROJECT_NAME) project structure...$(NO_COLOR)"
	@$(MAKE) -s create-directories
	@$(MAKE) -s setup-fixtures
	@$(MAKE) -s setup-examples
	@$(MAKE) -s generate-bootstrap
	@echo "$(GREEN)✓ Project setup complete$(NO_COLOR)"

create-directories:
	@mkdir -p projects/{fixtures,examples,templates,docs}
	@mkdir -p projects/fixtures/{browser-agents,cli-integration,protocol-buffers,mock-data}
	@mkdir -p projects/examples/{01-hello-polycall,02-edge-micro-sensor,03-browser-crypto-wallet}
	@mkdir -p projects/examples/{04-municipal-bridge,05-accessibility-voice,06-legacy-hotwire}
	@mkdir -p projects/examples/{07-distributed-telemetry,08-secure-messaging,09-realtime-collaboration}
	@mkdir -p projects/examples/10-ai-inference-edge
	@mkdir -p projects/templates/{basic-app,web-app,edge-device,hotwire-adapter}
	@mkdir -p build/{obj,lib,bin,edge,wasm,tests}
	@mkdir -p reports/{coverage,performance,security}

setup-fixtures:
	@echo "$(BOLD)Installing fixtures...$(NO_COLOR)"
	@$(MAKE) -s generate-browser-fixtures
	@$(MAKE) -s generate-cli-scripts
	@$(MAKE) -s generate-proto-files

setup-examples:
	@echo "$(BOLD)Setting up example projects...$(NO_COLOR)"
	@$(MAKE) -s generate-example-makefiles
	@$(MAKE) -s generate-example-sources

# Bootstrap script generation
generate-bootstrap:
	@echo "$(BOLD)Generating bootstrap script...$(NO_COLOR)"
	@chmod +x scripts/generate_bootstrap.sh 2>/dev/null || true
	@./scripts/generate_bootstrap.sh 2>/dev/null || $(MAKE) -s create-bootstrap

create-bootstrap:
	@mkdir -p scripts
	@echo '#!/bin/bash' > scripts/bootstrap.sh
	@echo 'set -euo pipefail' >> scripts/bootstrap.sh
	@echo '' >> scripts/bootstrap.sh
	@echo '# PolyCall Bootstrap Script' >> scripts/bootstrap.sh
	@echo '# OBINexus Computing' >> scripts/bootstrap.sh
	@echo '' >> scripts/bootstrap.sh
	@echo 'POLYCALL_HOME="$${POLYCALL_HOME:-$$(pwd)/polycall-runtime}"' >> scripts/bootstrap.sh
	@echo 'export POLYCALL_HOME' >> scripts/bootstrap.sh
	@echo '' >> scripts/bootstrap.sh
	@echo 'echo "Setting up PolyCall environment..."' >> scripts/bootstrap.sh
	@echo 'mkdir -p "$$POLYCALL_HOME"/{bin,lib,include,config,logs,temp}' >> scripts/bootstrap.sh
	@echo '' >> scripts/bootstrap.sh
	@echo '# Generate crypto seed' >> scripts/bootstrap.sh
	@echo 'if command -v openssl >/dev/null 2>&1; then' >> scripts/bootstrap.sh
	@echo '    SEED=$$(openssl rand -base64 32)' >> scripts/bootstrap.sh
	@echo 'else' >> scripts/bootstrap.sh
	@echo '    SEED=$$(dd if=/dev/urandom bs=32 count=1 2>/dev/null | base64)' >> scripts/bootstrap.sh
	@echo 'fi' >> scripts/bootstrap.sh
	@echo 'export POLYCALL_CRYPTO_SEED="$$SEED"' >> scripts/bootstrap.sh
	@echo '' >> scripts/bootstrap.sh
	@echo '# Create default configuration' >> scripts/bootstrap.sh
	@echo 'cat > "$$POLYCALL_HOME/config/polycall.yaml" <<EOF' >> scripts/bootstrap.sh
	@echo 'version: 1.0' >> scripts/bootstrap.sh
	@echo 'runtime:' >> scripts/bootstrap.sh
	@echo '  mode: interactive' >> scripts/bootstrap.sh
	@echo '  telemetry: enabled' >> scripts/bootstrap.sh
	@echo 'security:' >> scripts/bootstrap.sh
	@echo '  level: standard' >> scripts/bootstrap.sh
	@echo '  zero_trust: true' >> scripts/bootstrap.sh
	@echo 'EOF' >> scripts/bootstrap.sh
	@echo '' >> scripts/bootstrap.sh
	@echo 'echo "PolyCall environment ready at $$POLYCALL_HOME"' >> scripts/bootstrap.sh
	@echo 'echo "Crypto seed generated and exported"' >> scripts/bootstrap.sh
	@chmod +x scripts/bootstrap.sh

# Demo launcher
demo:
	@echo "$(BOLD)Launching PolyCall interactive demo...$(NO_COLOR)"
	@if [ ! -f build/bin/polycall ]; then \
		echo "$(YELLOW)Building PolyCall first...$(NO_COLOR)"; \
		$(MAKE) -s build; \
	fi
	@if [ ! -d projects/web ]; then \
		echo "$(YELLOW)Setting up web interface...$(NO_COLOR)"; \
		$(MAKE) -s setup-web-interface; \
	fi
	@echo "$(GREEN)Starting demo server on http://localhost:8080$(NO_COLOR)"
	@cd projects && python3 -m http.server 8080 --directory . 2>/dev/null || \
		python -m SimpleHTTPServer 8080

# Subcommand delegation
.PHONY: build test qa security vendor

build:
	@$(MAKE) -f $(MAKEFILE_ROOT) build

test:
	@$(MAKE) -f $(MAKEFILE_ROOT) test

qa:
	@$(MAKE) -f $(MAKEFILE_SPEC) qa-full

security:
	@$(MAKE) -f $(MAKEFILE_PURITY) security-scan

vendor:
	@$(MAKE) -f $(MAKEFILE_VENDOR) test-all-browsers

# File generation helpers (using external scripts)
generate-browser-fixtures:
	@mkdir -p projects/fixtures/browser-agents
	@touch projects/fixtures/browser-agents/.gitkeep

generate-cli-scripts:
	@mkdir -p projects/fixtures/cli-integration
	@touch projects/fixtures/cli-integration/.gitkeep

generate-proto-files:
	@mkdir -p projects/fixtures/protocol-buffers
	@touch projects/fixtures/protocol-buffers/.gitkeep

generate-example-makefiles:
	@for dir in projects/examples/*/; do \
		touch "$$dir/Makefile"; \
	done

generate-example-sources:
	@for dir in projects/examples/*/; do \
		mkdir -p "$$dir/src" "$$dir/include"; \
		touch "$$dir/src/main.c"; \
	done

setup-web-interface:
	@mkdir -p projects/web
	@touch projects/web/index.html

# Clean helpers
.PHONY: clean-all clean-projects clean-reports

clean-all: clean clean-projects clean-reports

clean-projects:
	@rm -rf projects/examples/*/build
	@find projects -name "*.o" -delete
	@find projects -name "*.a" -delete

clean-reports:
	@rm -rf reports/*

# Status and info commands
.PHONY: status info version

status:
	@echo "$(BOLD)PolyCall Build System Status$(NO_COLOR)"
	@echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
	@echo "Version: $(PROJECT_VERSION)"
	@echo "Build Mode: $${BUILD_MODE:-release}"
	@echo "Security Level: $${SECURITY_LEVEL:-standard}"
	@echo "Edge Micro: $${EDGE_MICRO:-disabled}"
	@echo ""
	@if [ -f build/lib/libpolycall.a ]; then \
		echo "$(GREEN)✓$(NO_COLOR) Static library built"; \
	else \
		echo "$(RED)✗$(NO_COLOR) Static library not built"; \
	fi
	@if [ -f build/bin/polycall ]; then \
		echo "$(GREEN)✓$(NO_COLOR) CLI binary built"; \
	else \
		echo "$(RED)✗$(NO_COLOR) CLI binary not built"; \
	fi

info: status
	@echo ""
	@echo "$(BOLD)Available Makefiles:$(NO_COLOR)"
	@ls -1 Makefile* | sed 's/^/  /'

version:
	@echo "$(PROJECT_NAME) v$(PROJECT_VERSION)"

# Special targets for command completion
.PHONY: list-targets list-options

list-targets:
	@$(MAKE) -qp | awk -F':' '/^[a-zA-Z0-9][^$$#\/\t=]*:([^=]|$$)/ {split($$1,A,/ /);for(i in A)print A[i]}' | sort -u | grep -v '^\.PHONY$$'

list-options:
	@echo "BUILD_MODE=debug"
	@echo "BUILD_MODE=release"
	@echo "BUILD_MODE=profile"
	@echo "EDGE_MICRO=enabled"
	@echo "EDGE_MICRO=disabled"
	@echo "SECURITY_LEVEL=none"
	@echo "SECURITY_LEVEL=standard"
	@echo "SECURITY_LEVEL=paranoid"