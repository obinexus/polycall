#!/bin/bash
# OBINexus PolyCall - Fix All Migration Violations
# Comprehensive script to resolve all purity and structure issues

set -euo pipefail

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Get project root
PROJECT_ROOT="${1:-$(pwd)}"
cd "$PROJECT_ROOT"

echo -e "${BLUE}=== OBINexus PolyCall Violation Fixer ===${NC}"
echo "Project root: $PROJECT_ROOT"
echo "This script will fix all migration violations"
echo

# Check for required scripts
echo -e "${BLUE}Checking required scripts...${NC}"

REQUIRED_SCRIPTS=(
    "scripts/polycall_migration_enforcer.py"
    "scripts/fix_polycall_violations.py"
    "scripts/reclassify_config_module.sh"
)

MISSING_SCRIPTS=()
for script in "${REQUIRED_SCRIPTS[@]}"; do
    if [ ! -f "$script" ]; then
        MISSING_SCRIPTS+=("$script")
    fi
done

if [ ${#MISSING_SCRIPTS[@]} -gt 0 ]; then
    echo -e "${RED}Missing required scripts:${NC}"
    for script in "${MISSING_SCRIPTS[@]}"; do
        echo "  - $script"
    done
    echo
    echo "Please ensure all scripts are in place before running."
    exit 1
fi

# Make scripts executable
chmod +x scripts/*.py scripts/*.sh

# Step 1: Create a full backup
BACKUP_DIR="backup_full_$(date +%Y%m%d_%H%M%S)"
echo -e "${BLUE}Creating full backup...${NC}"
mkdir -p "$BACKUP_DIR"
cp -r src include "$BACKUP_DIR/" 2>/dev/null || true
echo -e "${GREEN}✓ Backup created: $BACKUP_DIR${NC}"

# Step 2: Reclassify config module
echo
echo -e "${BLUE}Step 1/5: Reclassifying config module...${NC}"
if bash scripts/reclassify_config_module.sh "$PROJECT_ROOT"; then
    echo -e "${GREEN}✓ Config module reclassified${NC}"
else
    echo -e "${RED}✗ Failed to reclassify config module${NC}"
    exit 1
fi

# Step 3: Fix violations
echo
echo -e "${BLUE}Step 2/5: Fixing structural violations...${NC}"
if python3 scripts/fix_polycall_violations.py "$PROJECT_ROOT"; then
    echo -e "${GREEN}✓ Structural violations fixed${NC}"
else
    echo -e "${RED}✗ Failed to fix violations${NC}"
    exit 1
fi

# Step 4: Fix any remaining include issues
echo
echo -e "${BLUE}Step 3/5: Cleaning up include paths...${NC}"

# Fix common include path issues
find src -name "*.c" -type f | while read -r file; do
    # Fix double slashes in includes
    sed -i 's|#include "polycall//|#include "polycall/|g' "$file"
    
    # Fix backward includes
    sed -i 's|#include "\.\./\.\./include/|#include "|g' "$file"
    
    # Fix core/core issues
    sed -i 's|core/core/|core/|g' "$file"
done

echo -e "${GREEN}✓ Include paths cleaned${NC}"

# Step 5: Ensure all source files exist for headers
echo
echo -e "${BLUE}Step 4/5: Ensuring source/header pairs...${NC}"

# Create missing source files
find include/polycall -name "*.h" -type f | while read -r header; do
    # Get relative path from include/polycall
    rel_path="${header#include/polycall/}"
    
    # Determine source file path
    if [[ "$rel_path" == *"/"* ]]; then
        # Has subdirectory
        module=$(dirname "$rel_path")
        filename=$(basename "$rel_path" .h).c
        source_file="src/core/$module/$filename"
    else
        # Root level header
        filename=$(basename "$rel_path" .h).c
        source_file="src/core/polycall/$filename"
    fi
    
    # Create source file if missing
    if [ ! -f "$source_file" ]; then
        mkdir -p "$(dirname "$source_file")"
        
        cat > "$source_file" << EOF
/*
 * $filename
 * Implementation for $(basename "$header")
 * Auto-generated by violation fixer
 */

#include "$(echo "$header" | sed 's|^include/||')"

/* TODO: Implement functions declared in header */
EOF
        echo "  Created: $source_file"
    fi
done

echo -e "${GREEN}✓ Source/header pairs ensured${NC}"

# Step 6: Run final validation
echo
echo -e "${BLUE}Step 5/5: Running final validation...${NC}"

# Run the migration enforcer in check mode
if python3 scripts/polycall_migration_enforcer.py "$PROJECT_ROOT" --check-only; then
    echo -e "${GREEN}✓ All violations fixed!${NC}"
    FINAL_STATUS=0
else
    echo -e "${YELLOW}⚠ Some violations may remain${NC}"
    FINAL_STATUS=1
fi

# Generate summary report
echo
echo -e "${BLUE}=== Fix Summary ===${NC}"
echo "Backup location: $BACKUP_DIR"
echo "Config module: Reclassified as infrastructure"
echo "Include paths: Cleaned and standardized"
echo "Source files: Generated for orphaned headers"

if [ $FINAL_STATUS -eq 0 ]; then
    echo
    echo -e "${GREEN}All violations have been fixed!${NC}"
    echo
    echo "Next steps:"
    echo "1. Review the changes"
    echo "2. Run: make clean && make build"
    echo "3. Test the build: ./build/bin/polycall help"
else
    echo
    echo -e "${YELLOW}Some issues may remain. Please review the output above.${NC}"
    echo
    echo "To see remaining violations:"
    echo "  python3 scripts/polycall_migration_enforcer.py . --check-only"
fi

# Create a summary file
cat > fix_summary.txt << EOF
OBINexus PolyCall Violation Fix Summary
======================================
Date: $(date)
Backup: $BACKUP_DIR

Actions Taken:
1. Config module reclassified as infrastructure
2. Structural violations fixed
3. Include paths cleaned
4. Missing source files generated

Status: $([ $FINAL_STATUS -eq 0 ] && echo "SUCCESS" || echo "PARTIAL")

To restore from backup:
  rm -rf src include
  cp -r $BACKUP_DIR/* .
EOF

echo
echo "Summary saved to: fix_summary.txt"

exit $FINAL_STATUS
