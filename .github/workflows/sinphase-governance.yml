name: "Sinphasé Governance Enforcement"

on:
  push:
    branches: [ "dev", "dev-*", "main" ]
  pull_request:
    branches: [ "dev", "main" ]

jobs:
  sinphase-enforcement:
    runs-on: ubuntu-latest
    name: "🔒 Sinphasé Cost Function Validation"
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: "Setup Python for Cost Evaluator"
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: "Install Dependencies"
      run: |
        python -m pip install --upgrade pip
        pip install pathlib typing
        
    - name: "🔍 Run Sinphasé Cost Function Analysis"
      run: |
        echo "🔍 Evaluating architectural compliance..."
        python scripts/evaluator/sinphase_cost_evaluator.py \
          --project-root . \
          --threshold 0.6 \
          --emergency-mode \
          --violation-rate 0.90
        
    - name: "📊 Generate Governance Report"
      run: |
        echo "📊 Generating compliance report..."
        if [ -f "SINPHASE_VIOLATIONS.json" ]; then
          echo "❌ CRITICAL: Architecture violations detected"
          cat SINPHASE_VIOLATIONS.json
          exit 1
        else
          echo "✅ Architecture compliance validated"
        fi
        
    - name: "🚨 Emergency Isolation Check"
      run: |
        echo "🚨 Checking for emergency isolation requirements..."
        if [ -f "ISOLATION_LOG.md" ]; then
          echo "📋 Isolation log exists - reviewing entries..."
          tail -20 ISOLATION_LOG.md
        fi
        
  prevent-violations:
    runs-on: ubuntu-latest
    name: "🛡️ Block Architectural Violations"
    
    steps:
    - uses: actions/checkout@v4
    
    - name: "🛡️ FFI Threshold Protection"
      run: |
        echo "🛡️ Enforcing FFI call limits..."
        
        # Count FFI calls in changed files
        ffi_count=$(git diff --name-only HEAD~1 | xargs grep -l "FFI\|ffi\|foreign" | wc -l || echo "0")
        
        echo "FFI-related files in this change: $ffi_count"
        
        if [ "$ffi_count" -gt 5 ]; then
          echo "❌ BLOCKED: Too many FFI changes (limit: 5, found: $ffi_count)"
          echo "This violates Sinphasé single-pass compilation requirements"
          exit 1
        fi
        
    - name: "🔒 Dependency Cycle Detection"
      run: |
        echo "🔒 Checking for circular dependencies..."
        
        # Basic circular dependency detection
        find . -name "*.c" -o -name "*.h" | xargs grep -l "#include" | while read file; do
          includes=$(grep "#include" "$file" | wc -l)
          if [ "$includes" -gt 10 ]; then
            echo "⚠️ Warning: $file has $includes includes (threshold: 10)"
          fi
        done
