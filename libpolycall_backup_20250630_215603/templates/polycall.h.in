/**
 * @file polycall.h
 * @brief Unified header for the LibPolyCall library
 * @version @POLYCALL_VERSION@
 * 
 * This header provides access to all LibPolyCall functionality.
 * Include this file to access any component of the library.
 * 
 * Copyright (c) 2024 Nnamdi Okpala, OBINexusComputing
 * Licensed under the terms of the LibPolyCall license.
 */

#ifndef POLYCALL_H
#define POLYCALL_H

#ifdef __cplusplus
extern "C" {
#endif

/* Core system includes */
#include <polycall/core/polycall/polycall_core.h>
#include <polycall/core/polycall/polycall_context.h>
#include <polycall/core/polycall/polycall_error.h>
#include <polycall/core/polycall/polycall_memory.h>
#include <polycall/core/polycall/polycall_version.h>

/* Authentication module */
#include <polycall/core/auth/polycall_auth_context.h>
#include <polycall/core/auth/polycall_auth_identity.h>
#include <polycall/core/auth/polycall_auth_token.h>
#include <polycall/core/auth/polycall_auth_policy.h>
#include <polycall/core/auth/polycall_auth_audit.h>
#include <polycall/core/auth/polycall_auth_integration.h>

/* Configuration module */
#include <polycall/core/config/polycall_config_tools.h>
#include <polycall/core/config/path_utils.h>
#include <polycall/core/config/polycall_config_error.h>

/* Edge module */
#include <polycall/core/edge/polycall_edge.h>
#include <polycall/core/edge/edge_runtime.h>
#include <polycall/core/edge/compute_router.h>
#include <polycall/core/edge/node_selector.h>
#include <polycall/core/edge/security.h>

/* FFI module */
#include <polycall/core/ffi/ffi_core.h>
#include <polycall/core/ffi/type_system.h>
#include <polycall/core/ffi/memory_bridge.h>
#include <polycall/core/ffi/c_bridge.h>
#include <polycall/core/ffi/language_bridge.h>

/* Micro module */
#include <polycall/core/micro/polycall_micro_component.h>
#include <polycall/core/micro/polycall_micro_context.h>
#include <polycall/core/micro/polycall_micro_resource.h>
#include <polycall/core/micro/polycall_micro_security.h>

/* Network module */
#include <polycall/core/network/network.h>
#include <polycall/core/network/network_client.h>
#include <polycall/core/network/network_server.h>
#include <polycall/core/network/network_endpoint.h>
#include <polycall/core/network/connection_pool.h>
#include <polycall/core/network/subscription.h>

/* Protocol module */
#include <polycall/core/protocol/polycall_protocol_context.h>
#include <polycall/core/protocol/command.h>
#include <polycall/core/protocol/communication.h>
#include <polycall/core/protocol/message.h>

/* Telemetry module */
#include <polycall/core/telemetry/polycall_telemetry.h>
#include <polycall/core/telemetry/polycall_telemetry_reporting.h>
#include <polycall/core/telemetry/polycall_telemetry_security.h>

/* Accessibility module */
#include <polycall/core/accessibility/accessibility_interface.h>
#include <polycall/core/accessibility/accessibility_colors.h>

/* CLI functionality (if CLI support is enabled) */
#ifdef POLYCALL_ENABLE_CLI
#include <polycall/cli/command.h>
#include <polycall/cli/repl.h>
#include <polycall/cli/commands/command_registry.h>
#endif

/**
 * Initialize the LibPolyCall system
 * 
 * This function must be called before any other LibPolyCall function.
 * It initializes all components and prepares the system for use.
 * 
 * @param config Path to a configuration file or NULL for default configuration
 * @return 0 on success, error code on failure
 */
int polycall_init(const char* config);

/**
 * Clean up and shut down the LibPolyCall system
 * 
 * This function should be called before the application exits to properly
 * clean up resources allocated by LibPolyCall.
 * 
 * @return 0 on success, error code on failure
 */
int polycall_shutdown(void);

/**
 * Get the LibPolyCall version string
 * 
 * @return A string containing the version information
 */
const char* polycall_get_version(void);

#ifdef __cplusplus
}
#endif

#endif /* POLYCALL_H */